# $Id$
# vim:set ft=:

Sbopkg queuefiles are very simple to create, maintain, and share amongst other
users.  Each queuefile can contain a list of applications to build in order,
from top to bottom, and should be named with a .sqf extension.  Several sample
queuefiles are provided in the /doc/queuefiles directory.  Please note that
these queuefiles are, in fact, only samples and have not necessarily been
tested on the latest release of Slackware or on Slackware -current.  Please
use at your risk.  Additionally, the hope is that user-contributed queues can
be shared.  Please consider sending a copy of your queuefile to the sbopkg
mailing list located at: http://sbopkg.org/mailman/listinfo/sbopkg-users.

1.  Selecting ON or OFF in dialog:

If the application's name is left alone, it will default to 'ON,' or
selected, in the sbopkg dialog menus when the queuefile is loaded.  If
the application's name is prepended with a '-' it will default to
'OFF,' or deselected, in the dialog menus.

For example, a queuefile might contain:

foo
-bar
baz

In this case, both 'foo' and 'baz' will appear 'ON,' or selected, in the sbopkg
dialog menus, and 'bar' will appear 'OFF,' or deselected.

2.  Recursive queuefiles:

Additionally, queuefiles may be loaded recursively.  This means the user can
have separate queuefiles for certain applications, or certain queues, and then
a 'master' queuefile can bring them all together.  Recursively-loaded queues
are indicated by a '@' prepended to the name of the queuefile.

For example, a user might have one queuefile named 'multimedia.sqf' with these
items:

app1
app2
app3

And then the user might have another queuefile named 'mydesktop.sqf' with
these items:

app4
app5
@multimedia.sqf

In this case, when the 'mydesktop.sqf' queuefile is loaded, it will first load
app4, then app5, then the contents of the multimedia.sqf queuefile.  The final
queue will look like this:

app4
app5
app1
app2
app3

3.  Passing build options:

Finally, it is possible to pass build options for an application in a
queuefile.  This is done by using a single pipe ('|') character after the
application name.  For example:

app | FOO=yes BAR=no

Only use one pipe to separate the application name and the variables.

In case the user has saved build options individually in the dialog interface,
and also puts build options for that same application in the queuefile, sbopkg
will ask the user which one should be used.

4.  Multiple instances.

In all cases, whether loading software names more than once, or indicating
build options in more than one queuefile, the first instance will apply.  So
if a user has "app" in one queuefile, and "-app" in a recursive queuefile that
is loaded further down the list, the first instance, or "app" will prevail.
