#!/bin/sh -x
#
# $Id$ 
#
# sbopkg - The SlackBuilds.org Package Browser
# Copyright 2007-2008 Chess Griffin <chess@chessgriffin.com>
#
# Redistribution and use of this script, with or without modification,
# is permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
#  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Variables
DIAG=""
CONF=/etc/sbopkg/sbopkg.conf
CWD=${pwd}
VER=0.0.1

function sanity_checks
{
# Check if config file is there and if yes, set some variables
if [ ! -e $CONF ]; then
	echo "ERROR:  No /etc/sbopkg/sbopkg.conf file was found.  Please copy over /etc/sbopkg/sbopkg.conf.sample and try again."
	exit 0
else
	RSYNCMIRROR=`grep RSYNCMIRROR $CONF | sed -e s/RSYNCMIRROR=//`
	SLACKVER=`grep SLACKVER $CONF | sed -e s/SLACKVER=//`
	LOCALREPO=`grep LOCALREPO $CONF | sed -e s/LOCALREPO=//`
	SRCDIR=`grep SRCDIR $CONF | sed -e s/SRCDIR=//`
	LOGS=`grep KEEPLOG $CONF | sed -e s/KEEPLOG=//`
	if [ ! -d "$SRCDIR" ]; then
		echo "Creating local cache directory $SRCDIR to keep downloaded sources."
		mkdir -p $SRCDIR
	fi
fi
}

function check_local_dir
{
# Check to see if the main local directory for the mirror exists
if [ ! -d "$LOCALREPO" ]; then
	echo "Directory $LOCALREPO does not exist.  Please create it and run sbopkg again."
       	exit 0
else
 	cd $LOCALREPO/$SLACKVER
fi
}

function check_root
{
# Check to see whether the user is root or not
if [ ! $( id -u ) = "0" ]; then
	ROOT="false"
else
	ROOT="true"
fi
}

function show_changelog
{
# Show the changelog
if [ "$DIAG" = 1 ]; then
	dialog --title "SlackBuilds.org ChangeLog" --textbox ./ChangeLog.txt 0 0
else
	less ./ChangeLog.txt
fi
}

function get_category_list
{
# This function displays the list of SBo categories in the dialog
rm -f /tmp/sbopkg_category_list 2> /dev/null
DIR=`ls -d */ | sed -e 's/\///'`
if [ -n "$DIR" ]; then
	for i in $DIR; do
		echo "$i \"Browse the $i category\"" >> /tmp/sbopkg_category_list
	done
fi
}

function get_category_items_list
{
# This function makes and displays a list of all the package items in
# the selected category.  Ideally, it would be nice to have this be a
# checklist where the user can select multiple applications to build
# in a queue.
CATEGORY="`cat /tmp/sbopkg_category_selection`"
cd $LOCALREPO/$SLACKVER/$CATEGORY
rm -f /tmp/sbopkg_category_items_list 2> /dev/null
DIR=`ls -d */ | sed -e 's/\///'`
if [ -n "$DIR" ]; then
	for i in $DIR; do
		DESC=`grep -h -Z -m1 ^$i ./$i/slack-desc* | sed -e s/$i': '//` 
		echo "$i \"$DESC\"" >> /tmp/sbopkg_category_items_list
	done
fi
cd $LOCALREPO/$SLACKVER
}

function info_item
{
# This function shows the menu for each package where the user can see
# certain information or build the package if he is root
APP="`cat /tmp/sbopkg_item_selection`"
while [ 0 ]; do
dialog --title "$APP Information" --menu "Choose an item or press <Cancel> to exit\n" 20 60 5 \
"README" "View the README file" \
"SlackBuild" "View the SlackBuild file" \
"Info" "View the .info file" \
"Slack-desc" "View the slack-desc file" \
"Build" "Build a package for $APP" 2>/tmp/sbopkg_info_selection

if [ $? = 1 ]; then
	break
fi
S="`cat /tmp/sbopkg_info_selection`"
CATEGORY="`cat /tmp/sbopkg_category_selection`"
if [ "$S" = "README" ]; then
	dialog --title "Viewing README" --textbox $LOCALREPO/$SLACKVER/$CATEGORY/$APP/README 0 0
fi
if [ "$S" = "SlackBuild" ]; then
	dialog --title "Viewing SlackBuild" --textbox $LOCALREPO/$SLACKVER/$CATEGORY/$APP/$APP.SlackBuild 0 0
fi
if [ "$S" = "Info" ]; then
	dialog --title "Viewing .info" --textbox $LOCALREPO/$SLACKVER/$CATEGORY/$APP/$APP.info 0 0
fi
if [ "$S" = "Slack-desc" ]; then
	dialog --title "Viewing Slack-desc" --textbox $LOCALREPO/$SLACKVER/$CATEGORY/$APP/slack-desc 0 0
fi
if [ "$S" = "Build" ]; then
	# If the user selects to build an app, first check to make
	# they are root and continue if not.  If they are root, then
	# show a warning about the fact that the dialog box that shows
	# the running output has a flaw - the 'Exit' button allows the
	# user to exit out the running log dialog window but the build
	# process will continue.  Ideally, I'd like to prevent the
	# user from exiting the running output dialog until the build
	# process is complete.  Anyone know how to do this?
	check_root
	if [ $ROOT = "false" ]; then
		dialog --title "ERROR" --msgbox "You must run this script as the root user in order to build packages." 0 0
		continue
	fi
	dialog --title "WARNING" --yesno "Building a package in sbopkg is still experimental.  Pressing YES will continue the build and you will be presented with a text box showing the output of the build process, which is temporarily stored at /tmp/sbopkg_output.  If KEEPLOG is set to YES in the configuration file, then this temporary build log will also be saved at /tmp/sbopkg-build-log.  The build process will continue in the background even after pressing the EXIT button in the text box so do not start a second build until the first has completed.  Do you want to continue?" 15 60 2>$?
	if [ "$?" = 1 ]; then
		continue	
	fi
	if [ "$?" = 0 ]; then
		OUTPUT=/tmp/sbopkg_output
	       	search_package $APP	
		( build_package $APP >> $OUTPUT & ) 2>>$OUTPUT
		# This is the dialog box that I'd like to keep
		# displayed until the build process is over
		dialog --backtitle "Building the $APP package in the background." --tailbox $OUTPUT 20 70 
		if [ "$LOGS" = "YES" ]; then 
			cat $OUTPUT >> /tmp/sbopkg-build-log
		fi
		rm -f $OUTPUT
	fi
fi
done
}

function browse_items
{
# This function iterates through the list of software packages until
# one is chosen.
get_category_items_list
while [ 0 ]; do
	dialog --title "Browsing the $CATEGORY category" --menu "Please select a software package" 20 70 15 --file /tmp/sbopkg_category_items_list 2>/tmp/sbopkg_item_selection
	if [ $? = 1 ]; then
		break
	fi
	info_item
done
}

function browse_categories
{
# This function iterates through the category list until one is
# chosen.
get_category_list
while [ 0 ]; do
	dialog --title "Choose a category" --menu "Please select the category you wish to browse." 20 70 12 --file /tmp/sbopkg_category_list 2>/tmp/sbopkg_category_selection
	if [ $? = 1 ]; then
		break
	fi
	browse_items
done
}

function rsync_repo
{
# This function does the rsync with SBo.
	if [ "$DIAG" = 1 ]; then
		OUTPUT=/tmp/sbopkg_output
		( /usr/bin/rsync -avz --delete $RSYNCMIRROR/$SLACKVER/ $LOCALREPO/$SLACKVER/ >> $OUTPUT & ) 2>>$OUTPUT
		dialog --backtitle "Rsyncing with SlackBuilds.org" --tailbox $OUTPUT 20 70
		rm -f $OUTPUT
	else
		/usr/bin/rsync -avz --delete $RSYNCMIRROR/$SLACKVER/ $LOCALREPO/$SLACKVER/
	fi
}

function search_package ()
{
# Search for package name and exit if not found.  If it is found,
# populate various variables with data about the package for
# displaying information and building.
PKG=$1
PKGPATH=`find -name $PKG`  
if [ ! `find -name "$PKG"` ]; then 
	if [ "$DIAG" = 1 ]; then
		dialog --title "ERROR" --textbox "Package $PKG not found" 0 0
		continue
	else
		echo "Package $PKG not found.  Exiting."
		exit 0
	fi
fi
PKGNAME=`echo $PKG | sed 's/.*\///'` 
DNLD=`grep DOWNLOAD $PKGPATH/$PKG.info | sed -e s/DOWNLOAD=// | sed -e s/\"//g`
SRCTARBALL=`echo $DNLD | sed 's/.*\///'`
MD5=`grep MD5SUM $PKGPATH/$PKG.info | sed -e s/MD5SUM=// | sed -e s/\"//g`
}

function show_readme
{
# Show the package's README file.
	cat $PKGPATH/README
	exit 0
}

function get_tarball 
{
# Check to see if the source tarball exists in the local cache
# directory.  If it does, make a symlink to the package directory in
# the local mirror.  If it does not, download it and make the link.
# Thanks to Robby Workman for this idea.
	if [ ! -e $PKGPATH/$SRCTARBALL ]; then
		if [ -e $SRCDIR/$SRCTARBALL ]; then
			ln -s $SRCDIR/$SRCTARBALL $LOCALREPO/$SLACKVER/$PKGPATH/$SRCTARBALL
		else
			cd $SRCDIR
			wget -T 20 $DNLD || exit 1
			cd -
			ln -s $SRCDIR/$SRCTARBALL $LOCALREPO/$SLACKVER/$PKGPATH/$SRCTARBALL
		fi
	fi
}

function build_package ()
{
# Start fetching and building the package.
#echo ; echo "Building $PKG"
cd $PKGPATH
get_tarball
#if [ ! -e "$SRCNAME" ]; 
#	then echo "Downloading source code for "$SRCNAME"..."
#	wget -T 20 $DNLD || exit 1
#fi
echo "Checking MD5SUM for "$SRCTARBALL"..."
MD5CHK=`md5sum $SRCTARBALL | sed -e 's/ .*$//'`
if [ "$MD5CHK" == $MD5 ]; then 
	echo "OK"
	else 
		echo "MD5SUM check failed.  Exiting." 
		continue
fi
echo "Building Slackware package for "$SRCTARBALL"..."
sh $PKG.SlackBuild
echo "Done building $PKG."
cd $LOCALREPO/$SLACKVER
}

function cleanup
{
# If the temp files are there, delete them all.  Right now, I have
# this test to see if the main menu temp file is there, since it
# always is.  It would be cleaner if the 'if [ -e ] could test on
# anything in /tmp/sbopkg*, like: 'if [ -e /tmp/sbopkg_* ]; then' but
# that does not work.  I have not bothered trying to figure out the
# right syntax.
	if [ -e /tmp/sbopkg_main_menu_answer ]; then
		rm -r /tmp/sbopkg_*
	fi
  	cd $CWD
}

function main_menu
{
# This is the main dialog menu.
while [ 0 ]; do
dialog --title "SlackBuilds.org Package Browser (sbopkg version $VER)" --menu \
"\nChoose one of the following or press <Cancel> to exit\n" \
  15 60 4 \
"Rsync" "Rsync with SlackBuilds.org" \
"ChangeLog" "View the SlackBuilds.org ChangeLog" \
"Browse" "Browse the local SlackBuilds.org repo" \
"Exit" "Exit sbopkg" 2>/tmp/sbopkg_main_menu_answer

if [ $? = 1 ]; then
  	clear
  	cleanup
  	exit 0
fi

R="`cat /tmp/sbopkg_main_menu_answer`"

if [ "$R" = "Rsync" ]; then
	rsync_repo
fi

if [ "$R" = "Browse" ]; then
	browse_categories
fi

if [ "$R" = "ChangeLog" ]; then
	show_changelog
fi

if [ "$R" = "Exit" ]; then
	clear
  	cleanup
  	exit 0 
fi
done
}

# END OF FUNCTIONS.  What comes below is the actual start of the
# script when it is first run.

sanity_checks

# If there are no command line options then we will use the dialog
# version of sbopkg
if [ $# -eq 0 ]; then
	DIAG=1
	check_local_dir
	main_menu
	exit 0
fi

# This is the command line options and help
while getopts "b:d:hlrs:" OPT
do
  case $OPT in
    b ) BUILD="${OPTARG}"
	;;
    d ) LOCALREPO=${OPTARG}
	;;
    h ) echo
    	echo "sbopkg v$VER"
	echo "Usage: $0 [OPTIONS] <packagename(s)>"
	echo "Options are:"
	echo "  -b package	Build a package."
	echo "  -d localdir	Location of local SlackBuilds.org mirror."
	echo "  		This is currently set to $LOCALREPO"
	echo "  -h		Display this help message."
	echo "  -l		Display the SlackBuilds.org ChangeLog.txt and then quit."
	echo "  -r		Rsync the SlackBuilds.org respository with"
	echo "  		the local mirror and then quit."
	echo "  -s package	Search for a package and, if found, display the README."
	echo
	exit
	;;
    l ) CHANGELOG=1
	;;
    r ) RSY=1
	;;
    s ) SEARCH="${OPTARG}"
	;;
    * )	echo "No options given.  Run '$0 -h' for help.  Exiting."
	exit 0
        ;;
  esac
done
# End of option parsing.
shift $(($OPTIND - 1))

check_local_dir

# The build feature does not work with > 1 package at the moment.
# Have not investigated further.
if [ -n "$BUILD" ]; then
	check_root
	if [ $ROOT = "false" ]; then
		echo "You must run this script as the root user in order to build packages."
		exit 0
	fi
	for PKGBUILD in ${BUILD}; do
		search_package $PKGBUILD
		build_package $PKGBUILD
	done
exit 0
fi

if [ -n "$CHANGELOG" ]; then
    	show_changelog
	cleanup
	exit 0
fi

if [ -n "$RSY" ];
	then echo "Rsyncing with Slackbuilds.org repository into $LOCALREPO."
	rsync_repo
	cleanup
	echo "Finished rsync."
	exit 0
fi

# The search feature is not working with > 1 package at the moment.
# Have not yet investigated further.
if [ -n "$SEARCH" ]; then
	for PKGSEARCH in ${SEARCH}; do
		echo "Searching for $PKGSEARCH"
		search_package $PKGSEARCH
		show_readme
	done
exit 0
fi

cleanup
echo "All done."
exit 0
